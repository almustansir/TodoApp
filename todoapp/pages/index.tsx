import {
  addDoc,
  collection,
  deleteDoc,
  doc,
  getFirestore,
  setDoc,
} from "firebase/firestore";
import type { NextPage } from "next";
import Head from "next/head";
import { db } from "../firebase.config";
import useAuth from "../hooks/useAuth";
import { useCollection } from "react-firebase-hooks/firestore";
import React, { useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import {
  PencilSquareIcon,
  TrashIcon,
  XCircleIcon,
} from "@heroicons/react/24/outline";

type FormValues = {
  addTodo: string;
};
type FormValuesEdit = {
  todo: string;
};

const Home: NextPage = () => {
  const { logOut } = useAuth();
  const [editTracker, setEditTracker] = useState<boolean>(false);
  const [editDocId, setEditDocId] = useState("");
  const [editedValue, setEditedValue] = useState<string>("");
  const [todos, todosLoading, todoserror] = useCollection(
    collection(getFirestore(), "Todos"),
    { snapshotListenOptions: { includeMetadataChanges: true } }
  );

  const editDecumentKeyFunction = (docId: string) => {
    setEditDocId(docId);
    setEditTracker(true);
  };

  // todo update function
  const editTodo = (data: FormValuesEdit, editDoc: string) => {
    const docRef = doc(db, "Todos", editDoc);
    console.log(data);

    setDoc(docRef, data)
      .then(() => {
        console.log("Entire Document has been updated successfully");
      })
      .catch((error) => {
        console.log(error);
      });
  };

  const { register, handleSubmit, reset } = useForm<FormValues>();
  const onSubmit: SubmitHandler<FormValues> = (data) => {
    try {
      addDoc(collection(db, "Todos"), {
        todo: data.addTodo,
      });
    } catch (e) {
      console.log(e);
    }
    // resets the form after submission
    reset();
  };

  // calls editing function
  const editDocument = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    editTodo({ todo: editedValue }, editDocId);
    setEditedValue("");
    setEditTracker(false);
  };

  const deleteDecument = (data: any) => {
    deleteDoc(doc(db, "Todos", data));
  };

  return (
    <div>
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <nav className=" flex justify-between w-full bg-blue-400 px-6 py-2">
          <span className=" font-bold text-black-300 text-lg">TodoApp</span>
          <button
            onClick={logOut}
            className="font-bold py-1 px-1 rounded bg-red-500 text-white hover:bg-red-700"
          >
            Logout
          </button>
        </nav>
        <div className=" text-center w-[400px] md:w-[540px] shadow-md mx-auto py-8 mt-10">
          <h1 className="text-3xl font-bold mb-7">Todos</h1>
          <form className=" mb-6 w-full" onSubmit={handleSubmit(onSubmit)}>
            <div className="flex items-center border-b border-blue-500 py-2">
              <input
                type="text"
                placeholder="Add todos"
                className="appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none"
                {...register("addTodo", { required: true })}
              />
              <input
                className=" bg-blue-500 hover:bg-blue-700 text-white font-bold rounded focus:outline-none focus:shadow-outline flex-shrink-0 border-blue-500 hover:border-blue-700 text-sm border-4 py-1 px-2"
                type="submit"
                value="Add Todo"
              />
            </div>
          </form>
          <ul>
            {todoserror && <strong>Error: {JSON.stringify(todoserror)}</strong>}
            {todosLoading && <span>Loading...</span>}
            {editTracker && (
              <form
                className="flex justify-center items-center"
                onSubmit={(e) => editDocument(e)}
              >
                <input
                  type="text"
                  name="editTodo"
                  className=" border-b border-blue-400 mr-3 hover:border-blue-800 focus:outline-none focus:border-blue-800 focus:border-b"
                  onChange={(e) => setEditedValue(e.target.value)}
                />
                <input
                  className=" bg-blue-500 hover:bg-blue-700 text-white font-bold rounded focus:outline-none focus:shadow-outline flex-shrink-0 border-blue-500 hover:border-blue-700 text-sm border-4 py-1 px-1"
                  type="submit"
                  value="Edit"
                />
                <button onClick={() => setEditTracker(false)}>
                  <XCircleIcon className="h-8 w-8 text-red-400 hover:text-red-700 pt-2" />
                </button>
              </form>
            )}
            {todos &&
              todos.docs.map((doc) => (
                <div key={doc.id}>
                  <div>
                    <div className="font-bold flex justify-between mx-12 my-2">
                      {doc.data().todo}
                      <div className=" flex justify-between w-20">
                        <i
                          className="hover:cursor-pointer"
                          onClick={() => editDecumentKeyFunction(doc.id)}
                        >
                          <PencilSquareIcon className="h-6 w-6 text-gray-400 hover:text-gray-800" />
                        </i>{" "}
                        <i
                          className="hover:cursor-pointer"
                          onClick={() => deleteDecument(doc.id)}
                        >
                          <TrashIcon className="h-6 w-6 text-red-400 hover:text-red-700" />
                        </i>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
          </ul>
        </div>
      </div>
    </div>
  );
};

export default Home;
